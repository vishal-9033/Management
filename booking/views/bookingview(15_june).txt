import datetime
from typing import Any, Dict
from django import forms
from django.db.models.query import QuerySet
from django.forms import inlineformset_factory
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render,redirect
from booking.forms import *
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView,TemplateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse, reverse_lazy
from booking.models import *
from rooms.models import *
from django.db.models import Q
from extra_views import InlineFormSetView
from extra_views import CreateWithInlinesView, UpdateWithInlinesView, InlineFormSetFactory
from user.models import HotelUser
from django.contrib import messages

#room_check
class CheckRoomCreateView(LoginRequiredMixin,CreateView):
    model = Booking
    form_class = BookingForm
    template_name = 'user_templates/booking.html'


    #bottom of page navbar
    #To redirect to the page of the room selected from the check availability page(room pk)
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        room_id =self.kwargs['pk']
        room= Hotel.objects.filter(room__id=room_id)
        for i in room:
            context["roomslist"]=(i.pk)
            return context

    #check date From to To to check the date available or not
    def form_valid(self, form):
        room_id = self.kwargs['pk']
        room_obj = get_object_or_404(Room, id=room_id)
        
        start_date = form.cleaned_data['check_in_date']
        end_date = form.cleaned_data['check_out_date']


        print('=============== user insreted date are ===============')
        dates_between = []
        current_date = start_date
        while current_date <= end_date:
            dates_between.append(current_date)
            current_date += datetime.timedelta(days=1)
        print(dates_between)


        print('========= dates from data table ===========')
        booking_obj = Booking.objects.filter(room=room_obj)
        booked_dates = []
        for booked in booking_obj:
            current_date = booked.check_in_date
            while current_date <= booked.check_out_date:
                booked_dates.append(current_date)
                current_date += datetime.timedelta(days=1)
        print(booked_dates)
  
        if any(date in booked_dates for date in dates_between):
            messages.add_message(
            self.request,
            messages.INFO,
            "Room is already booked for this date. Please try another date or select another room in our hotel."
            )
            return self.form_invalid(form)
    
        form.instance.check_in_date = start_date
        form.instance.check_out_date = end_date
        form.instance.room = room_obj
        form.save()
        booking_form = Booking.objects.get(check_in_date=start_date,check_out_date=end_date,room=room_obj)
        # return redirect('booking:UpdateBooking', pk=self.kwargs['pk'])
        return HttpResponseRedirect(reverse_lazy('booking:UpdateBooking', kwargs={'pk': booking_form.id}))
    

#create inlineFromset
class GuestInline(InlineFormSetFactory):
    model = Guest
    form_class = GuestForm
    factory_kwargs = {'extra': 1, 'max_num': None,'can_order': False, 'can_delete': False}

 
#To create booking form with InlineView (guestfields_InlineView)
class GuestFieldsUpdateView(LoginRequiredMixin,UpdateWithInlinesView):
    model = Booking
    inlines = [GuestInline]
    fields=['id']
    template_name = 'user_templates/room_booking_form.html'


    #bottom of page navbar
    #To redirect to the page of the room selected from the check availability page(room pk)
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        room_num =self.kwargs['pk']
        bookied_obj= Booking.objects.get(id=self.kwargs['pk'])
        context['booking'] = bookied_obj
        context['room_num'] = room_num
        context["hotel"]= bookied_obj.room_id
        return context

    def forms_valid(self, form, inlines):
        print(">>>>>>>>>>>>>>>>>>>><>>>>>>>>>>>>>>>>>>>>>>>")
        booking = super().forms_valid(form, inlines)
        # booking  = Booking.objects.get().last()
        # print(form.instance.booking)
        # print(form.cleaned_data.get('data'))
        # for form_inline in inlines:
        #     form_inline.save()
        # form.save()
        return redirect(self.get_success_url())
    
    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        return form

    def forms_invalid(self, form, inlines):
        print(form.errors)
        form.instance.booking  = Booking.objects.latest('id')
        print(form.instance.booking)
        print(form.cleaned_data.get('data'))
        print('********invalid********')
        return self.render_to_response(self.get_context_data(form=form, inlines=inlines))
    
    def get_success_url(self):
        return reverse('booking:BookingList' ,kwargs={'pk': self.request.user.id})



#the list of the room that the user is booking in booking list user side (front end side)
class BookingListView(LoginRequiredMixin,ListView):
    model = Booking
    template_name = 'user_templates/booking_profile/booking_list.html'
    context_object_name = 'bookings'

    def get_queryset(self):
        if self.request.user.is_superuser:
            
            return Booking.objects.all()
        else:    
            queryset = Booking.objects.filter(User_id=self.kwargs['pk'])
            
            if queryset != None:
                return queryset
            else:
                return HttpResponse("You do not have any booked room available")

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = HotelUser.objects.get(id=self.kwargs['pk'])
        context["user"] = user
        return context


























































































































































































# #for cancel booking user can cancel booking rooms user side  (front end side)
# class BookingCancelDeleteView(DeleteView):
#     model = Guest
#     template_name = 'user_templates/booking_profile/booking_cancel.html'

#     def get_context_data(self, **kwargs):
#         context =  super().get_context_data(**kwargs)
#         booking_room = Booking.objects.get(id=self.kwargs['pk'])
#         cancelbooking = Room.objects.get(Guest=booking_room)
#         context["cancel"] = cancelbooking
#         return context
    
#     def get_success_url(self):
#         bookingcancel = Booking.objects.get(Booking = self.kwargs['pk'] )
#         return reverse_lazy('booking:CancelBooking', kwargs={'pk': bookingcancel.pk} )



# #for details of the booking that wich room is booked user side (front end side)
# class BookingDetailsView(DetailView):
#     model = Guest
#     template_name = 'user_templates/booking_profile/booking_details.html'
#     context_object_name = 'bookings'

#     def get_context_data(self):
#         queryset = Guest.objects.get(guest_name=self.kwargs['pk'])
#         return queryset
    
#     def get_context_data(self, **kwargs):
#         context = super().get_context_data(**kwargs)
#         if self.request.user.is_superuser:
#             book = Guest.objects.get(Guest=self.kwargs['pk'])
#             context['bookingdetail'] = book
#         else:
#             booked = Guest.objects.get(id=self.kwargs['pk'])
#             datebooked = Booking.objects.get(booking=booked)
#             context['booking'] = datebooked
#         return context


# #for list of booking in admin side
# class ListOfBookingViewListView(LoginRequiredMixin,ListView):
#     model = Booking
#     template_name = 'admin_template/booking/bookedroomlist.html'
#     context_object_name = 'bookings'

#     def get_queryset(self):
#         # queryset = Booking.objects.get(room= self.kwargs['pk'])
#         queryset = get_object_or_404(Booking,room=self.kwargs['pk'])
#         return queryset

#     def get_context_data(self, **kwargs):
#         context = super().get_context_data(**kwargs)
#         user = HotelUser.objects.get(id=self.kwargs['pk'])
#         context["user"] = user
#         return context
    


# #details of booked rooms in admin side(check_in _date,check_out_dates etc)
# class DetailsOfBookingViewDetailView(DetailView):
#     model = Guest
#     template_name = 'admin_template/booking/bookedroomdetails.html'
#     context_object_name = 'bookings'

#     def get_context_data(self):
#         queryset = Guest.objects.get(guest_name=self.kwargs['pk'])
#         return queryset
    
#     def get_context_data(self, **kwargs):
#         context = super().get_context_data(**kwargs)
#         if self.request.user.is_superuser:
#             book = Guest.objects.get(Guest=self.kwargs['pk'])
#             context['bookingdetail'] = book
#         else:
#             booked = Guest.objects.get(id=self.kwargs['pk'])
#             datebooked = Booking.objects.get(booking=booked)
#             context['booking'] = datebooked
#         return context



# #cancel bookings by super_admin and hotel_admin
# class CancelBookingDeleteView(DeleteView):
#     model = Guest
#     template_name = 'admin_template/booking/bookedroomdelete.html'

#     def get_context_data(self, **kwargs):
#         context =  super().get_context_data(**kwargs)
#         booking_room = Booking.objects.get(id=self.kwargs['pk'])
#         cancelbooking = Room.objects.get(Guest=booking_room)
#         context["cancel"] = booking_room
#         return context
    
#     def get_success_url(self):
#         bookingcancel = Booking.objects.get(Booking = self.kwargs['pk'] )
#         return reverse_lazy('booking:CancelBooking', kwargs={'pk': bookingcancel.pk})
